// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TripBookingstatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  UNPAID
  PAID
}

model Users {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userProfile   UserProfiles?
  adminProfiles AdminProfiles?
}

model AdminProfiles {
  id           String   @id @default(uuid())
  userId       String   @unique
  profileImage String?
  bio          String
  age          Int
  address      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         Users    @relation(fields: [userId], references: [id])
  trips        Trips[]
}

model UserProfiles {
  id           String         @id @default(uuid())
  userId       String         @unique
  profileImage String?
  bio          String
  age          Int
  address      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  users        Users          @relation(fields: [userId], references: [id])
  tripBookings TripBookings[]
}

model Trips {
  id            String         @id @default(uuid())
  userId        String
  tripTitle     String
  tripImage     String[]       @default([])
  tripDetails   String
  startingPoint String
  destination   String
  startDate     DateTime
  endDate       DateTime
  budget        Float
  activities    String[]
  totalBooked   Int            @default(0)
  totalSlots    Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creator       AdminProfiles  @relation(fields: [userId], references: [id])
  tripBookings  TripBookings[]
}

model TripBookings {
  id           String            @id @default(uuid())
  tripId       String
  userId       String
  slotsForBook Int
  totalAmount  Float
  status       TripBookingstatus @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  trip         Trips             @relation(fields: [tripId], references: [id])
  user         UserProfiles      @relation(fields: [userId], references: [id])
  payment      Payment?
}

model Payment {
  id                 String        @id @default(uuid())
  bookingId          String        @unique
  amount             Float         @default(0.00)
  transactionId      String        @unique
  paymentGatewayData Json?
  status             PaymentStatus @default(UNPAID)
  bookingInfo        TripBookings  @relation(fields: [bookingId], references: [id])
}
